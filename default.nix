# Note: This file is generated by nix-wrangle
# It can be regenerated with `nix-wrangle default-nix`
let
  systemNixpkgs = import (fetchTarball "https://github.com/NixOS/nixpkgs/archive/89281dd1dfed6839610f0ccad0c0e493606168fe.tar.gz") {};
  fallback = val: dfl: if val == null then dfl else val;
  makeFetchers = pkgs: {
    github = pkgs.fetchFromGitHub;
    url = builtins.fetchTarball;
  };
  fetch = pkgs: source:
    (builtins.getAttr source.type (makeFetchers pkgs)) source.fetch;
  sourcesJson = (builtins.fromJSON (builtins.readFile ./nix/wrangle.json)).sources;
  wrangleJson = sourcesJson.nix-wrangle or (abort "No nix-wrangle entry in nix/wrangle.json");
in
{ pkgs ? null, nix-wrangle ? null, ... }@provided:
let
  _pkgs = fallback pkgs (
    if builtins.hasAttr "pkgs" sourcesJson
    then import (fetch systemNixpkgs sourcesJson.pkgs) {} else systemNixpkgs
  );
  _wrangle = fallback nix-wrangle (_pkgs.callPackage "${fetch _pkgs wrangleJson}/${wrangleJson.nix}" {});
in
(_wrangle.api { pkgs = _pkgs; }).inject { inherit provided; path = ./.; }


